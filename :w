package handlers

import (
	"UserAuth/internal/database"
	"UserAuth/internal/models"
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"golang.org/x/crypto/bcrypt"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

func setupTestDB() *gorm.DB {
	db, err := gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	// Migrate the schema
	db.AutoMigrate(&models.User{})

	return db
}

func setupRouter() *gin.Engine {
	r := gin.Default()
	r.POST("/login", Login)
	return r
}

func TestLogin(t *testing.T) {
	// Setup
	database.DB = setupTestDB()
	router := setupRouter()

	// Create a test user
	hashedPassword, _ := bcrypt.GenerateFromPassword([]byte("password123"), bcrypt.DefaultCost)
	testUser := models.User{
		Username: "testuser",
		Email:    "test@example.com",
		Password: string(hashedPassword),
	}
	database.DB.Create(&testUser)

	// Test cases
	tests := []struct {
		name           string
		payload        gin.H
		expectedStatus int
		expectedBody   string
	}{
		{
			name: "Valid Login",
			payload: gin.H{
				"email_or_username": "testuser",
				"password":          "password123",
			},
			expectedStatus: http.StatusOK,
			expectedBody:   "Logged in successfully",
		},
		{
			name: "Invalid Password",
			payload: gin.H{
				"email_or_username": "testuser",
				"password":          "wrongpassword",
			},
			expectedStatus: http.StatusUnauthorized,
			expectedBody:   "Invalid credentials",
		},
		{
			name: "Non-existent User",
			payload: gin.H{
				"email_or_username": "nonexistent",
				"password":          "password123",
			},
			expectedStatus: http.StatusUnauthorized,
			expectedBody:   "Invalid credentials",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			payloadBytes, _ := json.Marshal(tt.payload)
			req, _ := http.NewRequest("POST", "/login", bytes.NewBuffer(payloadBytes))
			req.Header.Set("Content-Type", "application/json")
			w := httptest.NewRecorder()
			router.ServeHTTP(w, req)

			assert.Equal(t, tt.expectedStatus, w.Code)
			assert.Contains(t, w.Body.String(), tt.expectedBody)
		})
	}
}

func TestAccountLockout(t *testing.T) {
	// Setup
	database.DB = setupTestDB()
	router := setupRouter()

	// Create a test user
	hashedPassword, _ := bcrypt.GenerateFromPassword([]byte("password123"), bcrypt.DefaultCost)
	testUser := models.User{
		Username: "lockoutuser",
		Email:    "lockout@example.com",
		Password: string(hashedPassword),
	}
	database.DB.Create(&testUser)

	// Helper function to make login request
	makeLoginRequest := func(password string) *httptest.ResponseRecorder {
		payload := gin.H{
			"email_or_username": "lockoutuser",
			"password":          password,
		}
		payloadBytes, _ := json.Marshal(payload)
		req, _ := http.NewRequest("POST", "/login", bytes.NewBuffer(payloadBytes))
		req.Header.Set("Content-Type", "application/json")
		w := httptest.NewRecorder()
		router.ServeHTTP(w, req)
		return w
	}

	// Test account lockout
	for i := 0; i < maxLoginAttempts; i++ {
		w := makeLoginRequest("wrongpassword")
		assert.Equal(t, http.StatusUnauthorized, w.Code)
		assert.Contains(t, w.Body.String(), "Invalid credentials")
	}

	// Next attempt should lock the account
	w := makeLoginRequest("wrongpassword")
	assert.Equal(t, http.StatusUnauthorized, w.Code)
	assert.Contains(t, w.Body.String(), "Account locked due to too many failed attempts")

	// Correct password should still fail due to lockout
	w = makeLoginRequest("password123")
	assert.Equal(t, http.StatusUnauthorized, w.Code)
	assert.Contains(t, w.Body.String(), "Account is locked")

	// Wait for lockout to expire
	time.Sleep(lockoutDuration)

	// Should be able to login now
	w = makeLoginRequest("password123")
	assert.Equal(t, http.StatusOK, w.Code)
	assert.Contains(t, w.Body.String(), "Logged in successfully")
}

func TestMain(m *testing.M) {
	// Setup
	gin.SetMode(gin.TestMode)
	os.Setenv("JWT_SECRET", "test_secret")

	// Run tests
	code := m.Run()

	// Teardown
	os.Exit(code)
}

